}
}
}
# build up dataframe
replicate <- factor(rep(c(1:n_rep), n_treat * n_sp))
treatment <- rep(factor(rep(c(0:1), each = n_rep)),n_sp)
species <- factor(rep(c(1:n_sp), each=(n_rep * n_treat)))
fake <- data.frame(replicate, treatment, species, y)
fake
#Simulate data with the model:
# y = B0(spec) + B1*treatment + error
# error ~ normal(0, sigma_y)
n_rep <- 15
n_sp <- 10
n_treat <- 2
n_tot <- n_rep*n_sp*n_treat
treat <- c(0, 1) # treatment level
mu_sp <- 20   # mean of control group
sigma_y <- 0.5  # residual standard deviation (within group)
simresid <- rnorm((n_rep * n_sp * n_treat), 0, sigma_y) # simulating residuals
b1 <- -7  # expected effect size compared to reference (control) group
sigma_sp <- 5  # variance between species (bigger than within species)
b0sp <- rnorm(n_sp, mu_sp, sigma_sp)  # random effects for species
y <- rep(NA, n_tot)
counter <- 1
for (s in 1:n_sp) { # loop across species
for (t in 1:n_treat) { # loop across treatments
for (r in 1:n_rep) { # loop across replicates
y[counter] <- b0sp[s] + (b1 * treat[t]) + simresid[counter]
counter <- counter + 1
}
}
}
# build up dataframe
replicate <- factor(rep(c(1:n_rep), n_treat * n_sp))
treatment <- rep(factor(rep(c(0:1), each = n_rep)), n_sp)
species <- factor(rep(c(1:n_sp), each=(n_rep * n_treat)))
fake <- data.frame(replicate, treatment, species, y)
fake
ggplot(fake, aes(x = treatment, y = y)) +
geom_point() +
labs(x = "Group", y = "Y")
replicate
length(replicate)
{r, echo=FALSE}
install.packages("devtools")
install.packages("citr")
devtools::install_github("crsh/citr")
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
pdflatex test.tex
path <- "/Users/frederik/github/PhaenoFlex_clean/analysis"
setwd(path)
library(readxl)
# Load----------------------------------------------------------------
d.a <- read_excel("input/senescence/senescence_Amax.xlsx")
d.other <- read_excel("input/senescence/senescence_5_Sept_FB.xlsx", sheet = "percentage")
# Format data
rep.info <- d.other[, 1:4]
d.index <- cbind(rep.info, d.other[, grep("INDEX", colnames(d.other))])
d.percent <- cbind(rep.info, d.other[, grep("PERC", colnames(d.other))])
d.cci <- cbind(rep.info, d.other[, grep("CCI", colnames(d.other))])
d.index
# Function to subset data based on species
subset_data <- function(species, a, index, percen, CCI) {
list(
raw_A = subset(a, spec == species),
index = subset(index, spec == species),
percen = subset(percen, spec == species),
CCI = subset(CCI, spec == species)
)
}
species_list <- c("Prvi", "Acma", "Bepa", "Quma")
data_list <- lapply(species_list, subset_data, a = d.a, index = d.index, percen = d.percent, CCI = d.cci) #subset the full data into lists according to species and type of measurment
species_list
data_list
doy <- colnames(data)[7:19] #select doy values from column names of the xlsx file
d.temp <- data.frame((matrix(data = NA, ncol = 0, nrow = length(doy)))) #create a temp dataframe
d.temp$id <- data$tree_ID[n]
d.temp$species <- data$spec[n]
d.temp$treatment <- data$drought_timing[n]
##cleaning ----------------------------------------------------------
#create a data frame with 6 columns: id, species, treatment, doy, value, and type
d.cleaned <- data.frame(matrix(data = NA, ncol = 5, nrow = 0)) #create a empty dataframe to store the cleaned data
for (i in 1:length(data_list)){ #a loop to extract doy and values for tyep "A"
list <- data_list[[i]]
for (n in 1:nrow(list[["raw_A"]])){
data <- list[["raw_A"]]
A <- t(data[n, c(7:19)]) #select value columns and transpose them so that value will be in a single column
print(A)
doy <- colnames(data)[7:19] #select doy values from column names of the xlsx file
d.temp <- data.frame((matrix(data = NA, ncol = 0, nrow = length(doy)))) #create a temp dataframe
d.temp$id <- data$tree_ID[n]
d.temp$species <- data$spec[n]
d.temp$treatment <- data$drought_timing[n]
d.temp$doy <- as.numeric(doy)
d.temp$value <- A[1:13]
d.temp$type <- "A"
d.cleaned <- rbind(d.cleaned, d.temp) #append temp to d.cleaned dataframe
}
for (n in 1:nrow(list[["CCI"]])){ #a loop to extract doy and values for tyep "CCI" (same structure as above)
data <- list[["CCI"]]
CCI <- t(data[n, c(5:13)]) #transpose
doy <- sub("_CCI", "", colnames(data)[grepl("CCI", colnames(data))])
d.temp <- data.frame((matrix(data = NA, ncol = 0, nrow = length(doy))))
d.temp$id <- data$ID[n]
d.temp$species <- data$spec[n]
d.temp$treatment <- data$drought_timing[n]
d.temp$doy <- as.numeric(doy)
d.temp$value <- CCI[1:9]
d.temp$type <- "CCI"
d.cleaned <- rbind(d.cleaned, d.temp)
}
for (n in 1:nrow(list[["percen"]])){ #a loop to extract doy and values for tyep "PERC" (same structure as above)
data <- list[["percen"]]
P <- t(data[n, c(5:13)]) #transpose
doy <- sub("_PERC", "", colnames(data)[grepl("PERC", colnames(data))])
d.temp <- data.frame((matrix(data = NA, ncol = 0, nrow = length(doy))))
d.temp$id <- data$ID[n]
d.temp$species <- data$spec[n]
d.temp$treatment <- data$drought_timing[n]
d.temp$doy <- as.numeric(doy)
d.temp$value <- P[1:9]
d.temp$type <- "Percentage"
d.cleaned <- rbind(d.cleaned, d.temp)
}
}
d.cleaned$value <- as.numeric(d.cleaned$value)
#preliminary plots--------------------------------------------------
#plotting to see the original data
colors <- rainbow(length(unique(d.cleaned$type)))
names(colors) <- unique(d.cleaned$type)
for (spec in species_list){
file <-file.path(paste0("output/senescence_plots/", spec, "_rawplot", ".pdf"))
pdf(file, width = 25, height = 10)
par(mfrow = c(2, 5), mar = c(5, 2, 2, 4), oma = c(2, 2, 4, 2))
data <- subset(d.cleaned, d.cleaned$species == spec)
for (trmt in unique(data$treatment)){
trmt_data <- subset(data, treatment == trmt)
primary <- subset(trmt_data, type != "A")
secondary <- subset(trmt_data, type == "A")
plot(primary$doy, primary$value, col = colors[primary$type],
pch = 16, xlab = "DOY", ylab = "",
xlim = c(216, 304), ylim = c(0, 100),
main = paste(trmt),
xaxt = 'n', yaxt = 'n', cex.axis = 0.7)
mtext("Percentage", side = 2, line = 2, col = "black", cex = 0.7)
axis(1, at = seq(216, 304, by = 10), cex.axis = 0.7)
axis(2, at = seq(0, 100, by = 10), cex.axis = 0.7)
par(new = TRUE)
plot(secondary$doy, secondary$value, col = "red", #plotting secondary axis (A)
pch = 16, axes = FALSE, xlab = "", ylab = "",
xlim = c(216, 304), ylim = c(0, 10))
axis(4, at = seq(0, 10, by = 1), col = "red", col.axis = "red")
mtext("Amax value", side = 4, line = 2, col = "red", cex = 0.7)
legend("topright", legend = names(colors), col = colors, pch = 16, cex = 0.7)
}
mtext(paste(spec), side = 3, outer = TRUE, line = 1, cex = 1.5)
dev.off()
}
#preliminary plots--------------------------------------------------
#plotting to see the original data
colors <- rainbow(length(unique(d.cleaned$type)))
names(colors) <- unique(d.cleaned$type)
for (spec in species_list){
file <-file.path(paste0("output/senescence_plots/", spec, "_rawplot", ".pdf"))
pdf(file, width = 25, height = 10)
par(mfrow = c(2, 5), mar = c(5, 2, 2, 4), oma = c(2, 2, 4, 2))
data <- subset(d.cleaned, d.cleaned$species == spec)
for (trmt in unique(data$treatment)){
trmt_data <- subset(data, treatment == trmt)
primary <- subset(trmt_data, type != "A")
secondary <- subset(trmt_data, type == "A")
plot(primary$doy, primary$value, col = colors[primary$type],
pch = 16, xlab = "DOY", ylab = "",
xlim = c(216, 304), ylim = c(0, 100),
main = paste(trmt),
xaxt = 'n', yaxt = 'n', cex.axis = 0.7)
mtext("Percentage", side = 2, line = 2, col = "black", cex = 0.7)
axis(1, at = seq(216, 304, by = 10), cex.axis = 0.7)
axis(2, at = seq(0, 100, by = 10), cex.axis = 0.7)
par(new = TRUE)
plot(secondary$doy, secondary$value, col = "red", #plotting secondary axis (A)
pch = 16, axes = FALSE, xlab = "", ylab = "",
xlim = c(216, 304), ylim = c(0, 10))
axis(4, at = seq(0, 10, by = 1), col = "red", col.axis = "red")
mtext("Amax value", side = 4, line = 2, col = "red", cex = 0.7)
legend("topright", legend = names(colors), col = colors, pch = 16, cex = 0.7)
}
mtext(paste(spec), side = 3, outer = TRUE, line = 1, cex = 1.5)
dev.off()
}
getwd()
for (spec in species_list){
file <-file.path(paste0("output/", spec, "_rawplot", ".pdf"))
pdf(file, width = 25, height = 10)
par(mfrow = c(2, 5), mar = c(5, 2, 2, 4), oma = c(2, 2, 4, 2))
data <- subset(d.cleaned, d.cleaned$species == spec)
for (trmt in unique(data$treatment)){
trmt_data <- subset(data, treatment == trmt)
primary <- subset(trmt_data, type != "A")
secondary <- subset(trmt_data, type == "A")
plot(primary$doy, primary$value, col = colors[primary$type],
pch = 16, xlab = "DOY", ylab = "",
xlim = c(216, 304), ylim = c(0, 100),
main = paste(trmt),
xaxt = 'n', yaxt = 'n', cex.axis = 0.7)
mtext("Percentage", side = 2, line = 2, col = "black", cex = 0.7)
axis(1, at = seq(216, 304, by = 10), cex.axis = 0.7)
axis(2, at = seq(0, 100, by = 10), cex.axis = 0.7)
par(new = TRUE)
plot(secondary$doy, secondary$value, col = "red", #plotting secondary axis (A)
pch = 16, axes = FALSE, xlab = "", ylab = "",
xlim = c(216, 304), ylim = c(0, 10))
axis(4, at = seq(0, 10, by = 1), col = "red", col.axis = "red")
mtext("Amax value", side = 4, line = 2, col = "red", cex = 0.7)
legend("topright", legend = names(colors), col = colors, pch = 16, cex = 0.7)
}
mtext(paste(spec), side = 3, outer = TRUE, line = 1, cex = 1.5)
dev.off()
}
for (spec in species_list){
file <-file.path(paste0("output/", spec, "_rawplot", ".pdf"))
pdf(file, width = 25, height = 10)
par(mfrow = c(2, 5), mar = c(5, 2, 2, 4), oma = c(2, 2, 4, 2))
data <- subset(d.cleaned, d.cleaned$species == spec)
for (trmt in unique(data$treatment)){
trmt_data <- subset(data, treatment == trmt)
primary <- subset(trmt_data, type != "A")
secondary <- subset(trmt_data, type == "A")
plot(primary$doy, primary$value, col = colors[primary$type],
pch = 16, xlab = "DOY", ylab = "",
xlim = c(216, 304), ylim = c(0, 100),
main = paste(trmt),
xaxt = 'n', yaxt = 'n', cex.axis = 0.7)
mtext("Percentage", side = 2, line = 2, col = "black", cex = 0.7)
axis(1, at = seq(216, 304, by = 10), cex.axis = 0.7)
axis(2, at = seq(0, 100, by = 10), cex.axis = 0.7)
par(new = TRUE)
plot(secondary$doy, secondary$value, col = "red", #plotting secondary axis (A)
pch = 16, axes = FALSE, xlab = "", ylab = "",
xlim = c(216, 304), ylim = c(0, 10))
axis(4, at = seq(0, 10, by = 1), col = "red", col.axis = "red")
mtext("Amax value", side = 4, line = 2, col = "red", cex = 0.7)
legend("topright", legend = names(colors), col = colors, pch = 16, cex = 0.7)
}
mtext(paste(spec), side = 3, outer = TRUE, line = 1, cex = 1.5)
dev.off()
}
par(mfrow = c(1, 1))
## Logistic function for senescence data-----------------------------
# code from Fredi back in November 2023
senes_sim <- function(t, a, b, c) {
y <- a / (1 + exp((t - b) / c)) + rnorm(length(t), 0, 0.5) # logistic function with noise
return(y)
}
# Parameters
a <- 25     # Asymptote or maximum cholorophyll concentration
b <- 180    # the day when the cholorophyll concentration decrease is the fastest
c <- 5      # controls the rate of decrease
# Generate x values
t <- seq(150, 210) # time: day of the year from a selected start and end date
# Simulate senescence process using a logistic function
y <- senes_sim(t, a, b, c)
# Plot the simulated data senescence process
png("output/senescence_plots/simulated.png")
plot(t, y, type = "l", xlab = "Day of the year", ylab = "A",
main = "Senescence process of deciduous trees in autumn")
dev.off()
# Plot the simulated data senescence process
png("output/simulated.png")
plot(t, y, type = "l", xlab = "Day of the year", ylab = "A",
main = "Senescence process of deciduous trees in autumn")
dev.off()
y
#Fit data to SSlogis using simulated data
dat<-data.frame(values= y, time= t) #create data frame with simulated data
fit <- nls(values ~ SSlogis(time, a, b, c), data = dat)
summary(fit)
### Fit data to SSlogis----------------------------------------------
###Amax
d.all <- data.frame(matrix(data = NA, ncol = 4, nrow = 0 )) # create a dataframe for all the slopes
### Fit data to SSlogis----------------------------------------------
###Amax
d.all <- data.frame(matrix(data = NA, ncol = 4, nrow = 0 )) # create a dataframe for all the slopes
fits.list.A <- list() # create a list to store fit for each rep
d.A <- subset(d.cleaned, type == "A")
d.A$value <- as.numeric(d.A$value)
d.A$doy <- as.numeric(d.A$doy)
for (i in 1:length(unique(d.A$id))){
rep <- unique(d.A$id)[i]
d <- subset(d.A, d.A$id == rep)
fit.dat <- data.frame(value = d$value, time = d$doy)
fit <- tryCatch({ #fit the nls to each rep, and writes out data id if there's error
nls(value ~ SSlogis(time, a,b,c), data = fit.dat)
}, error = function (e){
cat("Error in fitting for id:", rep, "\nError message:", e$message, "Skipping. \n")
return(NULL)
})
if (!is.null(fit)) { #if the data fit successfully store the slope to the data frame
b_value <- coef(fit)['b'] # extract slope from the fitted curve
fits.list.A[[paste0(rep, "_fit_A")]] <- fit #save fit into the list
temp <- data.frame(matrix(data = NA, ncol = 0, nrow = 1))
temp$species <- unique(d$species[which(d$id == rep)])
temp$treatment <- unique(d$treatment[which(d$id == rep)])
temp$id <- rep
temp$b <- b_value
temp$type <- "A"
d.all <- rbind(d.all, temp) #append b to the big dataframe
}
}
fit.dat
##CCI
d.C <- subset(d.cleaned, type == "CCI")
fits.list.C <- list()
d.C$value <- as.numeric(d.C$value)
d.C$doy <- as.numeric(d.C$doy)
for (i in 1:length(unique(d.C$id))){
rep <- unique(d.C$id)[i]
d <- subset(d.C, d.C$id == rep)
fit.dat <- data.frame(value = d$value, time = d$doy)
fit <- tryCatch({
nls(value ~ SSlogis(time, a,b,c), data = fit.dat)
}, error = function (e){
cat("Error in fitting for id:", rep, "\nError message:", e$message, "Skipping. \n")
return(NULL)
})
if (!is.null(fit)) {
b_value <- coef(fit)['b'] # extract slope from the fitted curve
fits.list.C[[paste0(rep, "_fit_C")]] <- fit #save fit into the list
temp <- data.frame(matrix(data = NA, ncol = 0, nrow = 1))
temp$species <- unique(d$species[which(d$id == rep)])
temp$treatment <- unique(d$treatment[which(d$id == rep)])
temp$id <- rep
temp$b <- b_value
temp$type <- "CCI"
d.all <- rbind(d.all, temp) #append b to the big dataframe
}
}
## Percentage
d.P <- subset(d.cleaned, type == "Percentage")
fits.list.P <- list()
d.P$value <- as.numeric(d.P$value)
d.P$doy <- as.numeric(d.P$doy)
for (i in 1:length(unique(d.P$id))){
rep <- unique(d.P$id)[i]
d <- subset(d.P, d.P$id == rep)
fit.dat <- data.frame(value = d$value, time = d$doy)
fit <- tryCatch({
nls(value ~ SSlogis(time, a,b,c), data = fit.dat)
}, error = function (e){
cat("Error in fitting for id:", rep, "\nError message:", e$message, "Skipping. \n")
return(NULL)
})
if (!is.null(fit)) {
b_value <- coef(fit)['b']
fits.list.P[[paste0(rep, "_fit_P")]] <- fit
temp <- data.frame(matrix(data = NA, ncol = 0, nrow = 1))
temp$species <- unique(d$species[which(d$id == rep)])
temp$treatment <- unique(d$treatment[which(d$id == rep)])
temp$id <- rep
temp$b <- b_value
temp$type <- "Percentage"
d.all <- rbind(d.all, temp)
}
}
#
# Write a function to extract the doy for the perce
standardization <- function(params, percent) {
a <- params["a"]
b <- params["b"]
c <- params["c"]
value <- percent*a
doy <- b - c * log((a / value) - 1)
return(doy)
}
# extrac_paramegters from a fit
extract_params <- function(fit) {
coef(fit)
}
d.all$ten <- NA
d.all$fifty <- NA
d.all$ninty <- NA
# extract doy for 10%, 50% and 90% senescence
for (i in 1:nrow(d.all)){
rep <- d.all$id[i]
if (d.all$type[i] == "A") {
fit_index <- grep(rep, names(fits.list.A))
if (length(fit_index) > 0) {
fit <- fits.list.A[[fit_index[1]]]  # Use the first match
# Continue with your processing using the fit
params <- extract_params(fit)
d.all$doy10[which(d.all$id == rep & d.all$type == "A")] <- standardization(params, 0.1)
d.all$doy50[which(d.all$id == rep & d.all$type == "A")] <- standardization(params, 0.5)
d.all$doy90[which(d.all$id == rep & d.all$type == "A")] <- standardization(params, 0.9)
} else {
cat("Fit not found for id:", rep, "in fits.list.A\n")
}
}
else if (d.all$type[i] == "CCI") {
fit_index <- grep(rep, names(fits.list.C))
if (length(fit_index) > 0) {
fit <- fits.list.C[[fit_index[1]]]  # Use the first match
params <- extract_params(fit)
d.all$doy10[which(d.all$id == rep & d.all$type == "CCI")] <- standardization(params, 0.1)
d.all$doy50[which(d.all$id == rep & d.all$type == "CCI")] <- standardization(params, 0.5)
d.all$doy90[which(d.all$id == rep & d.all$type == "CCI")] <- standardization(params, 0.9)
} else {
cat("Fit not found for id:", rep, "in fits.list.C\n")
}
}
else if (d.all$type[i] == "Percentage") {
fit_index <- grep(rep, names(fits.list.P))
if (length(fit_index) > 0) {
fit <- fits.list.P[[fit_index[1]]]  # Use the first match
params <- extract_params(fit)
d.all$doy10[which(d.all$id == rep & d.all$type == "Percentage")] <- standardization(params, 0.1)
d.all$doy50[which(d.all$id == rep & d.all$type == "Percentage")] <- standardization(params, 0.5)
d.all$doy90[which(d.all$id == rep & d.all$type == "Percentage")] <- standardization(params, 0.9)
} else {
cat("Fit not found for id:", rep, "in fits.list.P\n")
}
} else {
cat("ID:", rep, "NA for type in d.all" )
}
}
fit_index
d.all
#summary data (Q10, Q50, Q90, and b) for each treatment in each species
#should I separate by each metrics? Maybe...
treatment_group <- split(d.all, d.all$species)
treatment_group
treatment_group <- lapply(treatment_group, function(sub_df) {
treatment_group <- split(sub_df, sub_df$treatment)
lapply(treatment_group, function(type_df){
split(type_df, type_df$type)
})
}) # split d.all by species and treatment under each species
treatment_group
treatment_group <- split(sub_df, sub_df$treatment)
#summary data (Q10, Q50, Q90, and b) for each treatment in each species
#should I separate by each metrics? Maybe...
treatment_group <- split(d.all, d.all$species)
treatment_group <- lapply(treatment_group, function(sub_df) {
treatment_group <- split(sub_df, sub_df$treatment)
lapply(treatment_group, function(type_df){
split(type_df, type_df$type)
})
}) # split d.all by species and treatment under each species
standard_error <- function(x) {
sd(x) / sqrt(length(x))
}
trmt_spec_summary <- data.frame(matrix(data = NA, nrow = 0, ncol = 5)) #create a data frame for mean and sd for each species + treatment combination
for (i in 1:length(names(treatment_group))){
d.spec <- treatment_group[[i]]
for (n in 1:length(names(d.spec))){
d.trmt <- d.spec[[n]]
for (o in 1:length(names(d.trmt))){
data <- d.trmt[[o]]
temp <- data.frame(matrix(data = NA, ncol = 0, nrow = 1))
temp$species <- unique(data$species)
temp$trmt <- unique(data$treatment)
temp$b <- mean(data$b)
temp$Q10 <- mean(data$doy10)
temp$Q10se <- standard_error(data$doy10)
temp$Q50 <- mean(data$doy50)
temp$Q50se <- standard_error(data$doy50)
temp$Q90 <- mean(data$doy90)
temp$Q90se <- standard_error(data$doy90)
temp$type <- unique(data$type)
trmt_spec_summary <- rbind(trmt_spec_summary, temp)
}
}
}
temp
trmt_spec_summary
# general fit for each species
spec_list <- split(d.cleaned, d.cleaned$species)
d.specwise <- data.frame(matrix(data = NA, ncol = 3, nrow = 0 ))
fits.list.spec <- list()
for (i in 1:length(unique(d.cleaned$species))){
name <- unique(d.cleaned$species)[i]
d.species <- subset(d.cleaned, d.cleaned$species == name)
for (n in 1:length(unique(d.species$type))){
metric <- unique(d.species$type)[n]
d <- subset(d.species, d.species$type == metric)
fit.dat <- data.frame(value = d$value, time = d$doy)
fit <- tryCatch({
nls(value ~ SSlogis(time, a,b,c), data = fit.dat)
}, error = function (e){
cat("Error in fitting for", name, metric, "\nError message:", e$message, "Skipping. \n")
return(NULL)
})
if (!is.null(fit)) {
b_value <- coef(fit)['b']
fits.list.spec[[paste0(name, "_fit_", metric)]] <- fit
temp <- data.frame(matrix(data = NA, ncol = 0, nrow = 1))
temp$species <- name
temp$b <- b_value
temp$type <- metric
d.specwise <- rbind(d.specwise, temp)
}
}
}
library(rstanarm)
